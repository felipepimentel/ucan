---
description: Rules for providing context in code documentation
globs: "**/*.py"
alwaysApply: true
---

### Documentação Contextual no Código

Para manter o contexto e garantir que tanto desenvolvedores humanos quanto assistentes de IA possam entender completamente o código, siga estas diretrizes:

#### Docstrings Enriquecidas
Além da documentação padrão, adicione informações de contexto:

```python
def process_conversation(conversation: Conversation) -> dict:
    """
    Processa uma conversa para preparar para exportação.
    
    Args:
        conversation: A conversa para processar
        
    Returns:
        Um dicionário com os dados processados
        
    Context:
        Esta função é parte do fluxo de exportação definido em ADR-0005.
        Usa o padrão de processamento em etapas para permitir extensibilidade.
        
    Related Components:
        - ConversationExporter: Classe que usa esta função
        - format_conversation: Função auxiliar
        
    Examples:
        >>> conv = Conversation(title="Exemplo")
        >>> result = process_conversation(conv)
    """
```

#### Comentários em Bloco
Para seções de código complexas, use comentários em bloco para explicar o contexto:

```python
# region Processamento de Mensagens
# A lógica abaixo implementa o algoritmo descrito em docs/algorithms/message_processing.md
# O fluxo consiste em 3 etapas:
# 1. Parseamento do conteúdo
# 2. Aplicação de formatação
# 3. Resolução de referências
#
# Veja também: ADR-0008 sobre processamento de mensagens
# endregion
```

#### Links para Contexto Externo
Sempre referencie documentação externa relevante:

```python
# Veja docs/architecture/ui_components.md para entender o fluxo de eventos
# Implementa o padrão Observer conforme definido em ADR-0006
# Relacionado ao issue #128: Melhorar a reatividade da interface
```

#### Descrição de Algoritmos
Para algoritmos complexos, descreva o que está acontecendo:

```python
def reorder_messages(messages: list[Message]) -> list[Message]:
    """
    Reordena mensagens para exibição.
    
    Algorithm:
        1. Agrupamento por data (O(n))
        2. Ordenação por timestamp dentro de cada grupo (O(n log n))
        3. Aplicação de regras de prioridade para mensagens do sistema
        
    Time Complexity: O(n log n)
    Space Complexity: O(n)
    """
```

#### Explicação de Trade-offs
Documente as escolhas e compromissos feitos:

```python
# Trade-off: Optamos por armazenar em memória para melhor performance
# às custas de maior consumo de recursos. Considerar otimização se
# o número de mensagens exceder 1000 (ver issue #143)
```

#### Contexto de Dependências
Explique por que certas dependências são usadas:

```python
# Usamos qasync em vez de asyncio padrão para integração com Qt
# Ver ADR-0012 para a decisão de usar qasync vs. alternativas
import qasync
```

#### Guia para Extensões
Para código destinado a ser estendido, forneça orientações:

```python
class BaseExporter:
    """
    Classe base para exportadores de conversas.
    
    Extension Guide:
        Para adicionar um novo formato de exportação:
        1. Criar subclasse de BaseExporter
        2. Implementar método export()
        3. Registrar no ExporterFactory
        4. Adicionar testes em tests/exporters/
        5. Documentar no docs/exporters.md
    """
```

#### Histórico de Decisões
Para código que evoluiu ao longo do tempo:

```python
# História: 
# - Versão inicial usava uma abordagem recursiva (2023-01)
# - Refatorado para abordagem iterativa para evitar estouro de pilha (2023-03)
# - Otimizado para melhor performance com conjuntos grandes (2023-06)
```

Estes elementos de documentação contextual ajudam a manter uma compreensão completa do código mesmo quando o desenvolvedor ou assistente de IA não tem conhecimento prévio do projeto. 